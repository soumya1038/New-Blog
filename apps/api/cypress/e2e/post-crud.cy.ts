describe('Post CRUD Operations', () => {\n  const baseUrl = 'http://localhost:4000';\n  const testUser = {\n    email: 'post-crud-test@example.com',\n    password: 'password123'\n  };\n  let accessToken: string;\n  let apiKey: string;\n  let postId: string;\n  let postSlug: string;\n\n  before(() => {\n    // Setup user and API key\n    cy.request('POST', `${baseUrl}/v1/auth/register`, testUser)\n      .then(() => {\n        return cy.request('POST', `${baseUrl}/v1/auth/login`, testUser);\n      })\n      .then((response) => {\n        accessToken = response.body.accessToken;\n        \n        return cy.request({\n          method: 'POST',\n          url: `${baseUrl}/v1/auth/api-keys`,\n          headers: { Authorization: `Bearer ${accessToken}` },\n          body: {\n            name: 'CRUD Test Key',\n            scopes: ['read', 'write']\n          }\n        });\n      })\n      .then((response) => {\n        apiKey = response.body.key;\n      });\n  });\n\n  describe('POST /v1/posts - Create post', () => {\n    it('creates post with auto-generated slug', () => {\n      cy.request({\n        method: 'POST',\n        url: `${baseUrl}/v1/posts`,\n        headers: { 'X-API-Key': apiKey },\n        body: {\n          title: 'Test Post for CRUD',\n          content: 'This is a test post with some content to test read time calculation. It should have enough words to generate a meaningful read time estimate.',\n          excerpt: 'A test post excerpt',\n          status: 'published',\n          tags: ['test', 'crud']\n        }\n      }).then((response) => {\n        expect(response.status).to.eq(201);\n        expect(response.body.post).to.have.property('slug');\n        expect(response.body.post.slug).to.eq('test-post-for-crud');\n        expect(response.body.post).to.have.property('readTime');\n        expect(response.body.post.readTime).to.have.property('minutes');\n        expect(response.body.post.readTime).to.have.property('words');\n        \n        postId = response.body.post._id;\n        postSlug = response.body.post.slug;\n      });\n    });\n\n    it('handles slug collision with short ID', () => {\n      cy.request({\n        method: 'POST',\n        url: `${baseUrl}/v1/posts`,\n        headers: { 'X-API-Key': apiKey },\n        body: {\n          title: 'Test Post for CRUD', // Same title\n          content: 'Another post with same title',\n          status: 'draft'\n        }\n      }).then((response) => {\n        expect(response.status).to.eq(201);\n        expect(response.body.post.slug).to.not.eq('test-post-for-crud');\n        expect(response.body.post.slug).to.include('test-post-for-crud-');\n      });\n    });\n  });\n\n  describe('GET /v1/posts - List posts with pagination', () => {\n    it('returns paginated posts with read time', () => {\n      cy.request({\n        method: 'GET',\n        url: `${baseUrl}/v1/posts?page=1&limit=5`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        expect(response.body).to.have.property('posts');\n        expect(response.body).to.have.property('pagination');\n        expect(response.body.pagination).to.have.property('hasMore');\n        expect(response.body.posts[0]).to.have.property('readTime');\n      });\n    });\n\n    it('filters posts by status', () => {\n      cy.request({\n        method: 'GET',\n        url: `${baseUrl}/v1/posts?status=published`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        response.body.posts.forEach((post: any) => {\n          expect(post.status).to.eq('published');\n        });\n      });\n    });\n  });\n\n  describe('GET /v1/posts/:slug - Get single post', () => {\n    it('returns post by slug with read time', () => {\n      cy.request({\n        method: 'GET',\n        url: `${baseUrl}/v1/posts/${postSlug}`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        expect(response.body.post.slug).to.eq(postSlug);\n        expect(response.body.post).to.have.property('readTime');\n        expect(response.body.post.title).to.eq('Test Post for CRUD');\n      });\n    });\n\n    it('returns 404 for non-existent slug', () => {\n      cy.request({\n        method: 'GET',\n        url: `${baseUrl}/v1/posts/non-existent-slug`,\n        headers: { 'X-API-Key': apiKey },\n        failOnStatusCode: false\n      }).then((response) => {\n        expect(response.status).to.eq(404);\n      });\n    });\n  });\n\n  describe('PATCH /v1/posts/:id - Update post', () => {\n    it('updates post and regenerates slug if title changed', () => {\n      cy.request({\n        method: 'PATCH',\n        url: `${baseUrl}/v1/posts/${postId}`,\n        headers: { 'X-API-Key': apiKey },\n        body: {\n          title: 'Updated Test Post Title',\n          content: 'Updated content with more words to test read time calculation again.',\n          status: 'published'\n        }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        expect(response.body.post.title).to.eq('Updated Test Post Title');\n        expect(response.body.post.slug).to.eq('updated-test-post-title');\n        expect(response.body.post).to.have.property('readTime');\n      });\n    });\n  });\n\n  describe('POST /v1/posts/:id/like - Like functionality', () => {\n    it('likes and unlikes post', () => {\n      // Like post\n      cy.request({\n        method: 'POST',\n        url: `${baseUrl}/v1/posts/${postId}/like`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        expect(response.body.liked).to.be.true;\n        expect(response.body.likes).to.eq(1);\n      });\n\n      // Unlike post\n      cy.request({\n        method: 'POST',\n        url: `${baseUrl}/v1/posts/${postId}/like`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        expect(response.body.liked).to.be.false;\n        expect(response.body.likes).to.eq(0);\n      });\n    });\n  });\n\n  describe('DELETE /v1/posts/:id - Soft delete', () => {\n    it('soft deletes post', () => {\n      cy.request({\n        method: 'DELETE',\n        url: `${baseUrl}/v1/posts/${postId}`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        expect(response.body.message).to.include('deleted');\n      });\n\n      // Verify post is not returned in list\n      cy.request({\n        method: 'GET',\n        url: `${baseUrl}/v1/posts`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        const deletedPost = response.body.posts.find((p: any) => p._id === postId);\n        expect(deletedPost).to.be.undefined;\n      });\n    });\n  });\n\n  describe('Frontend Integration', () => {\n    it('infinite scroll page loads posts', () => {\n      // Create multiple posts for pagination test\n      const promises = [];\n      for (let i = 1; i <= 8; i++) {\n        promises.push(\n          cy.request({\n            method: 'POST',\n            url: `${baseUrl}/v1/posts`,\n            headers: { 'X-API-Key': apiKey },\n            body: {\n              title: `Pagination Test Post ${i}`,\n              content: `Content for post ${i} with enough text to generate read time.`,\n              status: 'published'\n            }\n          })\n        );\n      }\n\n      // Visit posts page and test infinite scroll\n      cy.visit('http://localhost:3000/posts');\n      \n      // Set API key in localStorage\n      cy.window().then((win) => {\n        win.localStorage.setItem('apiKey', apiKey);\n      });\n      \n      cy.reload();\n      \n      // Should show posts\n      cy.contains('Blog Posts').should('be.visible');\n      cy.get('article').should('have.length.at.least', 1);\n      \n      // Test load more button\n      cy.get('button').contains('Load More').should('be.visible');\n    });\n  });\n});", "newStr": "describe('Post CRUD Operations', () => {\n  const baseUrl = 'http://localhost:4000';\n  const testUser = {\n    email: 'post-crud-test@example.com',\n    password: 'password123'\n  };\n  let accessToken: string;\n  let apiKey: string;\n  let postId: string;\n  let postSlug: string;\n\n  before(() => {\n    // Setup user and API key\n    cy.request('POST', `${baseUrl}/v1/auth/register`, testUser)\n      .then(() => {\n        return cy.request('POST', `${baseUrl}/v1/auth/login`, testUser);\n      })\n      .then((response) => {\n        accessToken = response.body.accessToken;\n        \n        return cy.request({\n          method: 'POST',\n          url: `${baseUrl}/v1/auth/api-keys`,\n          headers: { Authorization: `Bearer ${accessToken}` },\n          body: {\n            name: 'CRUD Test Key',\n            scopes: ['read', 'write']\n          }\n        });\n      })\n      .then((response) => {\n        apiKey = response.body.key;\n      });\n  });\n\n  describe('POST /v1/posts - Create post', () => {\n    it('creates post with auto-generated slug', () => {\n      cy.request({\n        method: 'POST',\n        url: `${baseUrl}/v1/posts`,\n        headers: { 'X-API-Key': apiKey },\n        body: {\n          title: 'Test Post for CRUD',\n          content: 'This is a test post with some content to test read time calculation. It should have enough words to generate a meaningful read time estimate.',\n          excerpt: 'A test post excerpt',\n          status: 'published',\n          tags: ['test', 'crud']\n        }\n      }).then((response) => {\n        expect(response.status).to.eq(201);\n        expect(response.body.post).to.have.property('slug');\n        expect(response.body.post.slug).to.eq('test-post-for-crud');\n        expect(response.body.post).to.have.property('readTime');\n        expect(response.body.post.readTime).to.have.property('minutes');\n        expect(response.body.post.readTime).to.have.property('words');\n        \n        postId = response.body.post._id;\n        postSlug = response.body.post.slug;\n      });\n    });\n\n    it('handles slug collision with short ID', () => {\n      cy.request({\n        method: 'POST',\n        url: `${baseUrl}/v1/posts`,\n        headers: { 'X-API-Key': apiKey },\n        body: {\n          title: 'Test Post for CRUD', // Same title\n          content: 'Another post with same title',\n          status: 'draft'\n        }\n      }).then((response) => {\n        expect(response.status).to.eq(201);\n        expect(response.body.post.slug).to.not.eq('test-post-for-crud');\n        expect(response.body.post.slug).to.include('test-post-for-crud-');\n      });\n    });\n  });\n\n  describe('GET /v1/posts - List posts with pagination', () => {\n    it('returns paginated posts with read time', () => {\n      cy.request({\n        method: 'GET',\n        url: `${baseUrl}/v1/posts?page=1&limit=5`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        expect(response.body).to.have.property('posts');\n        expect(response.body).to.have.property('pagination');\n        expect(response.body.pagination).to.have.property('hasMore');\n        expect(response.body.posts[0]).to.have.property('readTime');\n      });\n    });\n\n    it('filters posts by status', () => {\n      cy.request({\n        method: 'GET',\n        url: `${baseUrl}/v1/posts?status=published`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        response.body.posts.forEach((post: any) => {\n          expect(post.status).to.eq('published');\n        });\n      });\n    });\n  });\n\n  describe('GET /v1/posts/:slug - Get single post', () => {\n    it('returns post by slug with read time', () => {\n      cy.request({\n        method: 'GET',\n        url: `${baseUrl}/v1/posts/${postSlug}`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        expect(response.body.post.slug).to.eq(postSlug);\n        expect(response.body.post).to.have.property('readTime');\n        expect(response.body.post.title).to.eq('Test Post for CRUD');\n      });\n    });\n\n    it('returns 404 for non-existent slug', () => {\n      cy.request({\n        method: 'GET',\n        url: `${baseUrl}/v1/posts/non-existent-slug`,\n        headers: { 'X-API-Key': apiKey },\n        failOnStatusCode: false\n      }).then((response) => {\n        expect(response.status).to.eq(404);\n      });\n    });\n  });\n\n  describe('PATCH /v1/posts/:id - Update post', () => {\n    it('updates post and regenerates slug if title changed', () => {\n      cy.request({\n        method: 'PATCH',\n        url: `${baseUrl}/v1/posts/${postId}`,\n        headers: { 'X-API-Key': apiKey },\n        body: {\n          title: 'Updated Test Post Title',\n          content: 'Updated content with more words to test read time calculation again.',\n          status: 'published'\n        }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        expect(response.body.post.title).to.eq('Updated Test Post Title');\n        expect(response.body.post.slug).to.eq('updated-test-post-title');\n        expect(response.body.post).to.have.property('readTime');\n      });\n    });\n  });\n\n  describe('POST /v1/posts/:id/like - Like functionality', () => {\n    it('likes and unlikes post', () => {\n      // Like post\n      cy.request({\n        method: 'POST',\n        url: `${baseUrl}/v1/posts/${postId}/like`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        expect(response.body.liked).to.be.true;\n        expect(response.body.likes).to.eq(1);\n      });\n\n      // Unlike post\n      cy.request({\n        method: 'POST',\n        url: `${baseUrl}/v1/posts/${postId}/like`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        expect(response.body.liked).to.be.false;\n        expect(response.body.likes).to.eq(0);\n      });\n    });\n  });\n\n  describe('DELETE /v1/posts/:id - Soft delete', () => {\n    it('soft deletes post', () => {\n      cy.request({\n        method: 'DELETE',\n        url: `${baseUrl}/v1/posts/${postId}`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        expect(response.status).to.eq(200);\n        expect(response.body.message).to.include('deleted');\n      });\n\n      // Verify post is not returned in list\n      cy.request({\n        method: 'GET',\n        url: `${baseUrl}/v1/posts`,\n        headers: { 'X-API-Key': apiKey }\n      }).then((response) => {\n        const deletedPost = response.body.posts.find((p: any) => p._id === postId);\n        expect(deletedPost).to.be.undefined;\n      });\n    });\n  });\n});"}