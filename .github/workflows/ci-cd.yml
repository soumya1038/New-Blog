name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint API
        run: cd apps/api && npm run lint
      
      - name: Lint Web
        run: cd apps/web && npm run lint
      
      - name: Lint Admin
        run: cd apps/admin && npm run lint

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run API unit tests
        run: cd apps/api && npm test
      
      - name: Run Web unit tests
        run: cd apps/web && npm test
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test environment
        run: |
          cp .env.example .env
          echo "MONGODB_URI=mongodb://root:password@localhost:27017/test?authSource=admin" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "JWT_SECRET=test-jwt-secret-32-chars-long-123456" >> .env
          echo "JWT_REFRESH_SECRET=test-refresh-secret-32-chars-long-123" >> .env
      
      - name: Wait for services
        run: |
          timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'
          timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'
      
      - name: Run security audit
        run: cd apps/api && npm run security:audit
      
      - name: Start API server
        run: cd apps/api && npm run dev &
        env:
          NODE_ENV: test
      
      - name: Wait for API
        run: timeout 60 bash -c 'until curl -f http://localhost:4000/health; do sleep 2; done'
      
      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: apps/api
          start: npm run dev
          wait-on: 'http://localhost:4000/health'
          wait-on-timeout: 120
          spec: |
            cypress/e2e/auth-flow.cy.ts
            cypress/e2e/post-crud.cy.ts
            cypress/e2e/comment-threading.cy.ts
            cypress/e2e/admin-deep-features.cy.ts
            cypress/e2e/security-hardening.cy.ts
        env:
          CYPRESS_baseUrl: http://localhost:4000

  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test environment
        run: |
          cp .env.example .env
          echo "MONGODB_URI=mongodb://root:password@localhost:27017/test?authSource=admin" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "JWT_SECRET=test-jwt-secret-32-chars-long-123456" >> .env
          echo "JWT_REFRESH_SECRET=test-refresh-secret-32-chars-long-123" >> .env
      
      - name: Start API server
        run: cd apps/api && npm run dev &
        env:
          NODE_ENV: test
      
      - name: Wait for API
        run: timeout 60 bash -c 'until curl -f http://localhost:4000/health; do sleep 2; done'
      
      - name: Run k6 load tests
        run: k6 run apps/api/k6/load-test.js

  build:
    name: Build & Push Docker
    runs-on: ubuntu-latest
    needs: [integration-tests, load-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: staging
      url: https://blog-staging.example.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
      
      - name: Health check
        run: |
          echo "üè• Running health checks..."
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ **Staging Deployment Complete!**\n\n' +
                    '‚úÖ **Staging URL**: https://blog-staging.example.com\n' +
                    '‚úÖ **API Health**: https://blog-staging.example.com/health\n' +
                    '‚úÖ **Admin Panel**: https://admin-staging.example.com\n\n' +
                    `**Commit**: ${context.sha.substring(0, 7)}\n` +
                    `**Branch**: ${context.ref.replace('refs/heads/', '')}\n` +
                    `**Deployed at**: ${new Date().toISOString()}`
            })

  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, load-tests]
    if: always()
    
    steps:
      - name: Check status
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && 
                "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.load-tests.result }}" == "success" ]]; then
            echo "‚úÖ All checks passed!"
            exit 0
          else
            echo "‚ùå Some checks failed!"
            exit 1
          fi